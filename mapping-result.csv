,file name,dpct snippet,manual snippets
0,../oneAPI-DirectProgramming-training/affine/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          affine(d_input_image, d_output_image, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             affine(d_input_image, d_output_image, item_ct1);
           });
     });
"
1,../oneAPI-DirectProgramming-training/all-pairs-distance/dpcpp/main.dp.cpp,"     sycl::atomic<int>(sycl::global_ptr<int>(distance + INSTANCES * gx + gy))
","     sycl::atomic<int>(sycl::global_ptr<int>(distance + INSTANCES * gx + gy))
"
2,../oneAPI-DirectProgramming-training/all-pairs-distance/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
3,../oneAPI-DirectProgramming-training/all-pairs-distance/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
4,../oneAPI-DirectProgramming-training/all-pairs-distance/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                        [=](sycl::nd_item<3> item_ct1) {
                          GPUregister(data_char_device, distance_device,
                                      item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = dimGrid * dimBlock;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(dimBlock.get(2), dimBlock.get(1),
                                            dimBlock.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             GPUregister(data_char_device, distance_device, item_ct1);
           });
     });
"
5,../oneAPI-DirectProgramming-training/all-pairs-distance/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                        [=](sycl::nd_item<3> item_ct1) {
                          GPUshared(data_char_device, distance_device, item_ct1,
                                    dist_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       auto dpct_global_range = dimGrid * dimBlock;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(dimBlock.get(2), dimBlock.get(1),
                                            dimBlock.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             GPUshared(data_char_device, distance_device, item_ct1,
                       dist_acc_ct1.get_pointer());
           });
     });
"
6,../oneAPI-DirectProgramming-training/amgmk/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
          cgh.parallel_for(
              sycl::nd_range<3>(sycl::range<3>(grid1D) * sycl::range<3>(block1D),
                                sycl::range<3>(block1D)),
              [=](sycl::nd_item<3> item_ct1) {
                 relax(d_A_diag_data, d_A_diag_i, d_A_diag_j, d_u_data, d_f_data,
                       n, item_ct1);
              });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
          auto dpct_global_range =
              sycl::range<3>(grid1D) * sycl::range<3>(block1D);
          auto dpct_local_range = sycl::range<3>(block1D);
 
          cgh.parallel_for(
              sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                               dpct_global_range.get(1),
                                               dpct_global_range.get(0)),
                                sycl::range<3>(dpct_local_range.get(2),
                                               dpct_local_range.get(1),
                                               dpct_local_range.get(0))),
              [=](sycl::nd_item<3> item_ct1) {
                 relax(d_A_diag_data, d_A_diag_i, d_A_diag_j, d_u_data, d_f_data,
                       n, item_ct1);
              });
       });
"
7,../oneAPI-DirectProgramming-training/aobench/dpcpp/ao.dp.cpp,"   /*
","   /*
"
8,../oneAPI-DirectProgramming-training/aobench/dpcpp/ao.dp.cpp,"   /*
","   /*
"
9,../oneAPI-DirectProgramming-training/aobench/dpcpp/ao.dp.cpp,"   /*
","   /*
"
10,../oneAPI-DirectProgramming-training/aobench/dpcpp/ao.dp.cpp,"   /*
","   /*
"
11,../oneAPI-DirectProgramming-training/aobench/dpcpp/ao.dp.cpp,"   /*
","   /*
"
12,../oneAPI-DirectProgramming-training/aobench/dpcpp/ao.dp.cpp,"   /*
","   /*
"
13,../oneAPI-DirectProgramming-training/aobench/dpcpp/ao.dp.cpp,"   /*
","   /*
"
14,../oneAPI-DirectProgramming-training/atomicIntrinsics/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
          cgh.parallel_for(
              sycl::nd_range<3>(sycl::range<3>(1, 1, numBlocks) *
                                    sycl::range<3>(1, 1, numThreads),
                                sycl::range<3>(1, 1, numThreads)),
              [=](sycl::nd_item<3> item_ct1) {
                 testKernel(dOData, item_ct1);
              });
       });
","         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(1, 1, numBlocks) *
                                       sycl::range<3>(1, 1, numThreads),
                                   sycl::range<3>(1, 1, numThreads)),
                 [=](sycl::nd_item<3> item_ct1) {
                     testKernel(dOData, item_ct1);
                 });
         });
"
15,../oneAPI-DirectProgramming-training/b+tree/dpcpp/kernel/kernel.dp.cpp,"                 item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
16,../oneAPI-DirectProgramming-training/b+tree/dpcpp/kernel/kernel.dp.cpp,"                 item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
17,../oneAPI-DirectProgramming-training/b+tree/dpcpp/kernel/kernel2.dp.cpp,"                 item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
18,../oneAPI-DirectProgramming-training/b+tree/dpcpp/kernel/kernel2.dp.cpp,"                 item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
19,../oneAPI-DirectProgramming-training/b+tree/dpcpp/kernel/kernel2.dp.cpp,"         item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
20,../oneAPI-DirectProgramming-training/backprop/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<float, 1, sycl::access::mode::read_write,
                    sycl::access::target::local>
     sycl::accessor<float, 1, sycl::access::mode::read_write,
                    sycl::access::target::local>
 
     cgh.parallel_for(sycl::nd_range<3>(grid * threads, threads),
                      [=](sycl::nd_item<3> item_ct1) {
                        kernel_layerforward(d_input, d_input_weights,
                                            d_hidden_partial_sum, hid, item_ct1,
                                            input_node_acc_ct1.get_pointer(),
                                            weight_matrix_acc_ct1.get_pointer());
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<float, 1, sycl::access::mode::read_write,
                    sycl::access::target::local>
     sycl::accessor<float, 1, sycl::access::mode::read_write,
                    sycl::access::target::local>
 
     auto dpct_global_range = grid * threads;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           kernel_layerforward(d_input, d_input_weights, d_hidden_partial_sum,
                               hid, item_ct1, input_node_acc_ct1.get_pointer(),
                               weight_matrix_acc_ct1.get_pointer());
         });
   });
"
21,../oneAPI-DirectProgramming-training/backprop/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(sycl::nd_range<3>(grid * threads, threads),
                      [=](sycl::nd_item<3> item_ct1) {
                        kernel_adjust_weights(
                            d_input, d_input_weights, d_hidden_delta,
                            d_input_prev_weights, hid, item_ct1);
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = grid * threads;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           kernel_adjust_weights(d_input, d_input_weights, d_hidden_delta,
                                 d_input_prev_weights, hid, item_ct1);
         });
   });
"
22,../oneAPI-DirectProgramming-training/bezier-surface/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(grid * block, block),
                          [=](sycl::nd_item<3> item_ct1) {
                              BezierGPU(d_in, d_out, in_size_i, in_size_j,
                                        out_size_i, out_size_j, item_ct1);
                          });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = grid * block;
 
         cgh.parallel_for(
             sycl::nd_range<3>(
                 sycl::range<3>(dpct_global_range.get(2),
                                dpct_global_range.get(1),
                                dpct_global_range.get(0)),
                 sycl::range<3>(block.get(2), block.get(1), block.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
                 BezierGPU(d_in, d_out, in_size_i, in_size_j, out_size_i,
                           out_size_j, item_ct1);
             });
     });
"
23,../oneAPI-DirectProgramming-training/bfs/dpcpp/bfs.dp.cpp,"                 q_ct1.submit([&](sycl::handler &cgh) {
                         cgh.parallel_for(
                             sycl::nd_range<3>(grid * threads, threads),
                             [=](sycl::nd_item<3> item_ct1) {
                                     Kernel(d_graph_nodes, d_graph_edges,
                                            d_graph_mask, d_updating_graph_mask,
                                            d_graph_visited, d_cost, no_of_nodes,
                                            item_ct1);
                             });
                 });
","   q_ct1.submit([&](sycl::handler &cgh) {
    auto dpct_global_range = grid * threads;
 
    cgh.parallel_for(
        sycl::nd_range<3>(
            sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                           dpct_global_range.get(0)),
            sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
        [=](sycl::nd_item<3> item_ct1) {
         Kernel(d_graph_nodes, d_graph_edges, d_graph_mask,
                d_updating_graph_mask, d_graph_visited, d_cost, no_of_nodes,
                item_ct1);
        });
   });
"
24,../oneAPI-DirectProgramming-training/bfs/dpcpp/bfs.dp.cpp,"                 q_ct1.submit([&](sycl::handler &cgh) {
                         cgh.parallel_for(
                             sycl::nd_range<3>(grid * threads, threads),
                             [=](sycl::nd_item<3> item_ct1) {
                                     Kernel2(d_graph_mask, d_updating_graph_mask,
                                             d_graph_visited, d_over,
                                             no_of_nodes, item_ct1);
                             });
                 });
","   q_ct1.submit([&](sycl::handler &cgh) {
    auto dpct_global_range = grid * threads;
 
    cgh.parallel_for(
        sycl::nd_range<3>(
            sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                           dpct_global_range.get(0)),
            sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
        [=](sycl::nd_item<3> item_ct1) {
         Kernel2(d_graph_mask, d_updating_graph_mask, d_graph_visited, d_over,
                 no_of_nodes, item_ct1);
        });
   });
"
25,../oneAPI-DirectProgramming-training/boxfilter/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
26,../oneAPI-DirectProgramming-training/boxfilter/dpcpp/main.dp.cpp,"   /*
","   /*
"
27,../oneAPI-DirectProgramming-training/boxfilter/dpcpp/main.dp.cpp,"   /*
","   /*
"
28,../oneAPI-DirectProgramming-training/bsearch/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
29,../oneAPI-DirectProgramming-training/bspline-vgh/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(global_size * local_size, local_size),
           [=](sycl::nd_item<3> item_ct1) {
             bspline(d_spline_coefs, xs, ys, zs, d_walkers_vals, d_walkers_grads,
                     d_walkers_hess, d_a, d_b, d_c, d_da, d_db, d_dc, d_d2a,
                     d_d2b, d_d2c, spline_x_grid_delta_inv,
                     spline_y_grid_delta_inv, spline_z_grid_delta_inv,
                     spline_num_splines, i, ix, iy, iz, item_ct1);
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = global_size * local_size;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(local_size.get(2), local_size.get(1),
                                            local_size.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             bspline(d_spline_coefs, xs, ys, zs, d_walkers_vals, d_walkers_grads,
                     d_walkers_hess, d_a, d_b, d_c, d_da, d_db, d_dc, d_d2a,
                     d_d2b, d_d2c, spline_x_grid_delta_inv,
                     spline_y_grid_delta_inv, spline_z_grid_delta_inv,
                     spline_num_splines, i, ix, iy, iz, item_ct1);
           });
     });
"
30,../oneAPI-DirectProgramming-training/ccsd-trpdrv/dpcpp/ccsd_tengy.dp.cpp,"     dpct::atomic_fetch_add(emp4i,
","         dpct::atomic_fetch_add(emp4i,
"
31,../oneAPI-DirectProgramming-training/ccsd-trpdrv/dpcpp/ccsd_tengy.dp.cpp,"     dpct::atomic_fetch_add(emp4k,
","         dpct::atomic_fetch_add(emp4k,
"
32,../oneAPI-DirectProgramming-training/ccsd-trpdrv/dpcpp/ccsd_tengy.dp.cpp,"     dpct::atomic_fetch_add(
","         dpct::atomic_fetch_add(
"
33,../oneAPI-DirectProgramming-training/ccsd-trpdrv/dpcpp/ccsd_tengy.dp.cpp,"     dpct::atomic_fetch_add(
","         dpct::atomic_fetch_add(
"
34,../oneAPI-DirectProgramming-training/ccsd-trpdrv/dpcpp/main.dp.cpp,"                     /*
","                     /*
"
35,../oneAPI-DirectProgramming-training/ccsd-trpdrv/dpcpp/main.dp.cpp,"                     /*
","                     /*
"
36,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
37,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
38,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
39,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"                 /*
","                 /*
"
40,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
41,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
42,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"                 /*
","                 /*
"
43,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
44,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
45,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"                 /*
","                 /*
"
46,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         dpct::get_default_queue().submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(sycl::range<3>(1, 1, BLOCKS) *
                                           sycl::range<3>(1, 1, THREADS),
                                       sycl::range<3>(1, 1, THREADS)),
                     [=](sycl::nd_item<3> item_ct1) {
                             kernel(rows, cols, ncases, ncontrols, dev_dataT,
                                    results, item_ct1);
                     });
         });
","         dpct::get_default_queue().submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(sycl::range<3>(1, 1, BLOCKS) *
                                           sycl::range<3>(1, 1, THREADS),
                                       sycl::range<3>(1, 1, THREADS)),
                     [=](sycl::nd_item<3> item_ct1) {
                             kernel(rows, cols, ncases, ncontrols, dev_dataT,
                                    results, item_ct1);
                     });
         });
"
47,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
48,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"         /*
","         /*
"
49,../oneAPI-DirectProgramming-training/chi2/dpcpp/chi2.dp.cpp,"                 /*
","                 /*
"
50,../oneAPI-DirectProgramming-training/compute-score/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
51,../oneAPI-DirectProgramming-training/compute-score/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<ulong, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           partial_acc_ct1(
 
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, global_size) *
                                              sycl::range<3>(1, 1, local_size),
                                          sycl::range<3>(1, 1, local_size)),
                        [=](sycl::nd_item<3> item_ct1) {
                          compute(d_docWordFrequencies_dimm1,
                                  d_docWordFrequencies_dimm2,
                                  d_profileWeights_dimm1, d_profileWeights_dimm2,
                                  d_isWordInProfileHash, d_partialSums_dimm1,
                                  d_partialSums_dimm2, item_ct1,
                                  partial_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<ulong, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           partial_acc_ct1(
 
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, global_size) *
                                              sycl::range<3>(1, 1, local_size),
                                          sycl::range<3>(1, 1, local_size)),
                        [=](sycl::nd_item<3> item_ct1) {
                          compute(d_docWordFrequencies_dimm1,
                                  d_docWordFrequencies_dimm2,
                                  d_profileWeights_dimm1, d_profileWeights_dimm2,
                                  d_isWordInProfileHash, d_partialSums_dimm1,
                                  d_partialSums_dimm2, item_ct1,
                                  partial_acc_ct1.get_pointer());
                        });
     });
"
52,../oneAPI-DirectProgramming-training/compute-score/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, global_size_reduction) *
                                 sycl::range<3>(1, 1, local_size_reduction),
                             sycl::range<3>(1, 1, local_size_reduction)),
           [=](sycl::nd_item<3> item_ct1) {
             reduction(d_docInfo, d_partialSums_dimm1, d_partialSums_dimm2,
                       d_profileScore, item_ct1);
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, global_size_reduction) *
                                 sycl::range<3>(1, 1, local_size_reduction),
                             sycl::range<3>(1, 1, local_size_reduction)),
           [=](sycl::nd_item<3> item_ct1) {
             reduction(d_docInfo, d_partialSums_dimm1, d_partialSums_dimm2,
                       d_profileScore, item_ct1);
           });
     });
"
53,../oneAPI-DirectProgramming-training/d2q9-bgk/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
54,../oneAPI-DirectProgramming-training/d2q9-bgk/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
                              cgh);
       sycl::accessor<float, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       cgh.parallel_for(
           sycl::nd_range<3>(grids * threads, threads),
           [=](sycl::nd_item<3> item_ct1) {
             d2q9_bgk(speeds0, speeds1, speeds2, speeds3, speeds4, speeds5,
                      speeds6, speeds7, speeds8, tmp_speeds0, tmp_speeds1,
                      tmp_speeds2, tmp_speeds3, tmp_speeds4, tmp_speeds5,
                      tmp_speeds6, tmp_speeds7, tmp_speeds8, obstacles,
                      partial_sum, partial_sum2, densityaccel, omega, Nx, Ny, tt,
                      item_ct1, local_sum2_acc_ct1.get_pointer(),
                      local_sum_acc_ct1.get_pointer());
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
                              cgh);
       sycl::accessor<float, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             d2q9_bgk(speeds0, speeds1, speeds2, speeds3, speeds4, speeds5,
                      speeds6, speeds7, speeds8, tmp_speeds0, tmp_speeds1,
                      tmp_speeds2, tmp_speeds3, tmp_speeds4, tmp_speeds5,
                      tmp_speeds6, tmp_speeds7, tmp_speeds8, obstacles,
                      partial_sum, partial_sum2, densityaccel, omega, Nx, Ny, tt,
                      item_ct1, local_sum2_acc_ct1.get_pointer(),
                      local_sum_acc_ct1.get_pointer());
           });
     });
"
55,../oneAPI-DirectProgramming-training/dp/dpcpp/main.dp.cpp,"     /*
","     /*
"
56,../oneAPI-DirectProgramming-training/dslash/dpcpp/kernels.dp.cpp,"     /*
","     /*
"
57,../oneAPI-DirectProgramming-training/easyWave/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel(d_node, d_R6, Imin, Jmin, Imax, Jmax, NLat,
                                 Par.sshZeroThreshold, Par.sshArrivalThreshold,
                                 Par.time, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             kernel(d_node, d_R6, Imin, Jmin, Imax, Jmax, NLat,
                    Par.sshZeroThreshold, Par.sshArrivalThreshold, Par.time,
                    item_ct1);
           });
     });
"
58,../oneAPI-DirectProgramming-training/easyWave/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel3(d_node, d_R6, Imin, Jmin, Imax, Jmax, NLat,
                                  item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             kernel3(d_node, d_R6, Imin, Jmin, Imax, Jmax, NLat, item_ct1);
           });
     });
"
59,../oneAPI-DirectProgramming-training/epistatis/dpcpp/main.dp.cpp,"     /*
","     /*
"
60,../oneAPI-DirectProgramming-training/extrema/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          relextrema_1D<T>(length, order, clip, d_x, d_result,
                                           item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             relextrema_1D<T>(length, order, clip, d_x, d_result, item_ct1);
           });
     });
"
61,../oneAPI-DirectProgramming-training/extrema/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          relextrema_2D(length_x, length_y, order, clip, axis,
                                        d_x, d_result, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             relextrema_2D(length_x, length_y, order, clip, axis, d_x, d_result,
                           item_ct1);
           });
     });
"
62,../oneAPI-DirectProgramming-training/filter/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
63,../oneAPI-DirectProgramming-training/filter/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
64,../oneAPI-DirectProgramming-training/filter/dpcpp/main.dp.cpp,"     *l_n = sycl::atomic<int>(sycl::global_ptr<int>(nres)).fetch_add(*l_n);
","     *l_n = sycl::atomic<int>(sycl::global_ptr<int>(nres)).fetch_add(*l_n);
"
65,../oneAPI-DirectProgramming-training/filter/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
66,../oneAPI-DirectProgramming-training/filter/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
67,../oneAPI-DirectProgramming-training/filter/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         l_n_acc_ct1(cgh);
 
     cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                      [=](sycl::nd_item<3> item_ct1) {
                        filter(d_filtered_data, d_nres, d_data_to_filter,
                               NUM_ELEMS, item_ct1, l_n_acc_ct1.get_pointer());
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         l_n_acc_ct1(cgh);
 
     auto dpct_global_range = dimGrid * dimBlock;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(dimBlock.get(2), dimBlock.get(1), dimBlock.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           filter(d_filtered_data, d_nres, d_data_to_filter, NUM_ELEMS, item_ct1,
                  l_n_acc_ct1.get_pointer());
         });
   });
"
68,../oneAPI-DirectProgramming-training/floydwarshall/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                          [=](sycl::nd_item<3> item_ct1) {
                            floydWarshallPass(pathDistanceBuffer, pathBuffer,
                                              numNodes, i, item_ct1);
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = grids * threads;
 
         cgh.parallel_for(
             sycl::nd_range<3>(
                 sycl::range<3>(dpct_global_range.get(2),
                                dpct_global_range.get(1),
                                dpct_global_range.get(0)),
                 sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               floydWarshallPass(pathDistanceBuffer, pathBuffer, numNodes, i,
                                 item_ct1);
             });
       });
"
69,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
70,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
71,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"     sycl::atomic<unsigned int>(sycl::global_ptr<unsigned int>(cmp_size))
","     sycl::atomic<unsigned int>(sycl::global_ptr<unsigned int>(cmp_size))
"
72,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
73,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
74,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"     sycl::atomic<unsigned int>(sycl::global_ptr<unsigned int>(cmp_size))
","     sycl::atomic<unsigned int>(sycl::global_ptr<unsigned int>(cmp_size))
"
75,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<unsigned, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         compressable_acc_ct1(cgh);
 
     cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                      [=](sycl::nd_item<3> item_ct1) {
                        fpc_kernel(d_values, d_cmp_size, item_ct1,
                                   compressable_acc_ct1.get_pointer());
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<unsigned, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         compressable_acc_ct1(cgh);
 
     auto dpct_global_range = grids * threads;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           fpc_kernel(d_values, d_cmp_size, item_ct1,
                      compressable_acc_ct1.get_pointer());
         });
   });
"
76,../oneAPI-DirectProgramming-training/fpc/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<unsigned, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         compressable_acc_ct1(cgh);
 
     cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                      [=](sycl::nd_item<3> item_ct1) {
                        fpc2_kernel(d_values, d_cmp_size, item_ct1,
                                    compressable_acc_ct1.get_pointer());
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<unsigned, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         compressable_acc_ct1(cgh);
 
     auto dpct_global_range = grids * threads;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           fpc2_kernel(d_values, d_cmp_size, item_ct1,
                       compressable_acc_ct1.get_pointer());
         });
   });
"
77,../oneAPI-DirectProgramming-training/gaussian/dpcpp/gaussianElim.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(gridDim_fan1 * blockDim_fan1, blockDim_fan1),
           [=](sycl::nd_item<3> item_ct1) {
             fan1(d_a, d_m, size, t, item_ct1);
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = gridDim_fan1 * blockDim_fan1;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(blockDim_fan1.get(2), blockDim_fan1.get(1),
                              blockDim_fan1.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             fan1(d_a, d_m, size, t, item_ct1);
           });
     });
"
78,../oneAPI-DirectProgramming-training/gaussian/dpcpp/gaussianElim.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(gridDim_fan2 * blockDim_fan2, blockDim_fan2),
           [=](sycl::nd_item<3> item_ct1) {
             fan2(d_a, d_b, d_m, size, t, item_ct1);
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = gridDim_fan2 * blockDim_fan2;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(blockDim_fan2.get(2), blockDim_fan2.get(1),
                              blockDim_fan2.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             fan2(d_a, d_b, d_m, size, t, item_ct1);
           });
     });
"
79,../oneAPI-DirectProgramming-training/geodesic/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel_distance(d_VA, d_VC, N, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             kernel_distance(d_VA, d_VC, N, item_ct1);
           });
     });
"
80,../oneAPI-DirectProgramming-training/haccmk/dpcpp/haccmk.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(
                         sycl::range<3>(1, 1,
                                        (n1 + block_size - 1) / block_size) *
                             sycl::range<3>(1, 1, block_size),
                         sycl::range<3>(1, 1, block_size)),
                     [=](sycl::nd_item<3> item_ct1) {
                             haccmk_kernel(n1, n2, d_xx, d_yy, d_zz, d_mass,
                                           d_vx2, d_vy2, d_vz2, fsrmax, mp_rsm,
                                           fcoeff, item_ct1);
                     });
         });
","  q_ct1.submit([&](sycl::handler &cgh) {
   cgh.parallel_for(
       sycl::nd_range<3>(
           sycl::range<3>(1, 1, (n1 + block_size - 1) / block_size) *
               sycl::range<3>(1, 1, block_size),
           sycl::range<3>(1, 1, block_size)),
       [=](sycl::nd_item<3> item_ct1) {
        haccmk_kernel(n1, n2, d_xx, d_yy, d_zz, d_mass, d_vx2, d_vy2, d_vz2,
                      fsrmax, mp_rsm, fcoeff, item_ct1);
       });
  });
"
81,../oneAPI-DirectProgramming-training/heartwall/dpcpp/kernel/kernel.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(grids * threads, threads),
           [=](sycl::nd_item<3> item_ct1) {
             hw(frame_no, common, d_frame, d_endoRow, d_endoCol, d_tEndoRowLoc,
                d_tEndoColLoc, d_epiRow, d_epiCol, d_tEpiRowLoc, d_tEpiColLoc,
                d_endoT, d_epiT, d_in2, d_conv, d_in2_pad_cumv,
                d_in2_pad_cumv_sel, d_in2_sub_cumh, d_in2_sub_cumh_sel,
                d_in2_sub2, d_in2_sqr, d_in2_sqr_sub2, d_in_sqr, d_tMask,
                d_mask_conv, d_in_mod_temp, d_in_partial_sum,
                d_in_sqr_partial_sum, d_par_max_val, d_par_max_coo,
                d_in_final_sum, d_in_sqr_final_sum, d_denomT, item_ct1);
           });
     });
","   q_ct1.submit([&](sycl::handler &cgh) {
    auto dpct_global_range = grids * threads;
 
    cgh.parallel_for(
        sycl::nd_range<3>(
            sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                           dpct_global_range.get(0)),
            sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
        [=](sycl::nd_item<3> item_ct1) {
         hw(frame_no, common, d_frame, d_endoRow, d_endoCol, d_tEndoRowLoc,
            d_tEndoColLoc, d_epiRow, d_epiCol, d_tEpiRowLoc, d_tEpiColLoc,
            d_endoT, d_epiT, d_in2, d_conv, d_in2_pad_cumv, d_in2_pad_cumv_sel,
            d_in2_sub_cumh, d_in2_sub_cumh_sel, d_in2_sub2, d_in2_sqr,
            d_in2_sqr_sub2, d_in_sqr, d_tMask, d_mask_conv, d_in_mod_temp,
            d_in_partial_sum, d_in_sqr_partial_sum, d_par_max_val, d_par_max_coo,
            d_in_final_sum, d_in_sqr_final_sum, d_denomT, 
 #ifdef TEST_CHECKSUM
 	   d_checksum, 
 #endif
 	   item_ct1);
        });
   });
"
82,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(grid) * sycl::range<3>(block),
                           sycl::range<3>(block)),
         [=](sycl::nd_item<3> item_ct1) {
           initial_value(n, dx, length, u, item_ct1);
         });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = sycl::range<3>(grid) * sycl::range<3>(block);
     auto dpct_local_range = sycl::range<3>(block);
 
     cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                       dpct_global_range.get(1),
                                                       dpct_global_range.get(0)),
                                        sycl::range<3>(dpct_local_range.get(2),
                                                       dpct_local_range.get(1),
                                                       dpct_local_range.get(0))),
                      [=](sycl::nd_item<3> item_ct1) {
                        initial_value(n, dx, length, u, item_ct1);
                      });
   });
"
83,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(grid) * sycl::range<3>(block),
                           sycl::range<3>(block)),
         [=](sycl::nd_item<3> item_ct1) {
           zero(n, u_tmp, item_ct1);
         });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = sycl::range<3>(grid) * sycl::range<3>(block);
     auto dpct_local_range = sycl::range<3>(block);
 
     cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                       dpct_global_range.get(1),
                                                       dpct_global_range.get(0)),
                                        sycl::range<3>(dpct_local_range.get(2),
                                                       dpct_local_range.get(1),
                                                       dpct_local_range.get(0))),
                      [=](sycl::nd_item<3> item_ct1) {
                        zero(n, u_tmp, item_ct1);
                      });
   });
"
84,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"   /*
","   /*
"
85,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"   /*
","   /*
"
86,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"     /*
","     /*
"
87,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(grid) * sycl::range<3>(block),
                             sycl::range<3>(block)),
           [=](sycl::nd_item<3> item_ct1) {
             solve(n, alpha, dx, dt, r, r2, u, u_tmp, item_ct1);
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = sycl::range<3>(grid) * sycl::range<3>(block);
       auto dpct_local_range = sycl::range<3>(block);
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(dpct_local_range.get(2), dpct_local_range.get(1),
                              dpct_local_range.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             solve(n, alpha, dx, dt, r, r2, u, u_tmp, item_ct1);
           });
     });
"
88,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"   /*
","   /*
"
89,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"   /*
","   /*
"
90,../oneAPI-DirectProgramming-training/heat/dpcpp/heat.dp.cpp,"     /*
","     /*
"
91,../oneAPI-DirectProgramming-training/heat2d/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       auto Lx_ct4 = Lx;
       auto Ly_ct5 = Ly;
 
       cgh.parallel_for(
           sycl::nd_range<3>(blk * thr, thr), [=](sycl::nd_item<3> item_ct1) {
             dev_lapl_iter(out, in, xdelta, xnorm, Lx_ct4, Ly_ct5, item_ct1);
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = blk * thr;
 
       auto Lx_ct4 = Lx;
       auto Ly_ct5 = Ly;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(thr.get(2), thr.get(1), thr.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             dev_lapl_iter(out, in, xdelta, xnorm, Lx_ct4, Ly_ct5, item_ct1);
           });
     });
"
92,../oneAPI-DirectProgramming-training/hotspot3D/dpcpp/3D.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(gridDim * blockDim, blockDim),
                        [=](sycl::nd_item<3> item_ct1) {
                          hotspot3d(d_tIn, d_pIn, d_tOut, numCols, numRows,
                                    layers, ce, cw, cn, cs, ct, cb, cc,
                                    stepDivCap, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = gridDim * blockDim;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(blockDim.get(2), blockDim.get(1),
                                            blockDim.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             hotspot3d(d_tIn, d_pIn, d_tOut, numCols, numRows, layers, ce, cw,
                       cn, cs, ct, cb, cc, stepDivCap, item_ct1);
           });
     });
"
93,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/bucketsort.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<unsigned int, 1, sycl::access::mode::read_write,
                    sycl::access::target::local>
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(1, 1, global_histogram / local_histogram) *
                 sycl::range<3>(1, 1, local_histogram),
             sycl::range<3>(1, 1, local_histogram)),
         [=](sycl::nd_item<3> item_ct1) {
           histogram1024(d_offsets_buff, d_input_buff, listsize, minimum,
                         maximum, item_ct1, s_Hist_acc_ct1.get_pointer());
         });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::accessor<unsigned int, 1, sycl::access::mode::read_write,
                    sycl::access::target::local>
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(1, 1, global_histogram / local_histogram) *
                 sycl::range<3>(1, 1, local_histogram),
             sycl::range<3>(1, 1, local_histogram)),
         [=](sycl::nd_item<3> item_ct1) {
           histogram1024(d_offsets_buff, d_input_buff, listsize, minimum,
                         maximum, item_ct1, s_Hist_acc_ct1.get_pointer());
         });
   });
"
94,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/bucketsort.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(1, 1, globalpre / localpre) *
                               sycl::range<3>(1, 1, localpre),
                           sycl::range<3>(1, 1, localpre)),
         [=](sycl::nd_item<3> item_ct1) {
           bucketprefix(d_prefixoffsets_buff, d_offsets_buff, blocks, item_ct1);
         });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(1, 1, globalpre / localpre) *
                               sycl::range<3>(1, 1, localpre),
                           sycl::range<3>(1, 1, localpre)),
         [=](sycl::nd_item<3> item_ct1) {
           bucketprefix(d_prefixoffsets_buff, d_offsets_buff, blocks, item_ct1);
         });
   });
"
95,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/hybridsort.dp.cpp,"   /*
","   /*
"
96,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/hybridsort.dp.cpp,"   /*
","   /*
"
97,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/hybridsort.dp.cpp,"   /*
","   /*
"
98,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/hybridsort.dp.cpp,"   /*
","   /*
"
99,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/hybridsort.dp.cpp,"   /*
","   /*
"
100,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/hybridsort.dp.cpp,"   /*
","   /*
"
101,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/mergesort.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, grid[0]) *
                                              sycl::range<3>(1, 1, local[0]),
                                          sycl::range<3>(1, 1, local[0])),
                        [=](sycl::nd_item<3> item_ct1) {
                          mergeSortPass(d_origList_buff, d_resultList_buff,
                                        d_constStartAddr, threadsPerDiv, nrElems,
                                        item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, grid[0]) *
                                              sycl::range<3>(1, 1, local[0]),
                                          sycl::range<3>(1, 1, local[0])),
                        [=](sycl::nd_item<3> item_ct1) {
                          mergeSortPass(d_origList_buff, d_resultList_buff,
                                        d_constStartAddr, threadsPerDiv, nrElems,
                                        item_ct1);
                        });
     });
"
102,../oneAPI-DirectProgramming-training/hybridsort/dpcpp/mergesort.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                      [=](sycl::nd_item<3> item_ct1) {
                        mergepack((float *)d_origList_buff,
                                  (float *)d_resultList_buff, d_constStartAddr,
                                  d_finalStartAddr, d_nullElements, item_ct1);
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = grids * threads;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           mergepack((float *)d_origList_buff, (float *)d_resultList_buff,
                     d_constStartAddr, d_finalStartAddr, d_nullElements,
                     item_ct1);
         });
   });
"
103,../oneAPI-DirectProgramming-training/iso2dfd/dpcpp/iso2dfd.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                          [=](sycl::nd_item<3> item_ct1) {
                            iso_2dfd_kernel(d_next, d_prev, d_vel, dtDIVdxy,
                                            nRows, nCols, item_ct1);
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = dimGrid * dimBlock;
 
         cgh.parallel_for(
             sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                              dpct_global_range.get(1),
                                              dpct_global_range.get(0)),
                               sycl::range<3>(dimBlock.get(2), dimBlock.get(1),
                                              dimBlock.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               iso_2dfd_kernel(d_next, d_prev, d_vel, dtDIVdxy, nRows, nCols,
                               item_ct1);
             });
       });
"
104,../oneAPI-DirectProgramming-training/iso2dfd/dpcpp/iso2dfd.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                          [=](sycl::nd_item<3> item_ct1) {
                            iso_2dfd_kernel(d_prev, d_next, d_vel, dtDIVdxy,
                                            nRows, nCols, item_ct1);
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = dimGrid * dimBlock;
 
         cgh.parallel_for(
             sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                              dpct_global_range.get(1),
                                              dpct_global_range.get(0)),
                               sycl::range<3>(dimBlock.get(2), dimBlock.get(1),
                                              dimBlock.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               iso_2dfd_kernel(d_prev, d_next, d_vel, dtDIVdxy, nRows, nCols,
                               item_ct1);
             });
       });
"
105,../oneAPI-DirectProgramming-training/jaccard/dpcpp/main.dp.cpp,"           dpct::atomic_fetch_add(&weight_i[j], ref_val);
","           dpct::atomic_fetch_add(&weight_i[j], ref_val);
"
106,../oneAPI-DirectProgramming-training/jaccard/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(nblocks * nthreads, nthreads),
                        [=](sycl::nd_item<3> item_ct1) {
                          fill<weighted, T>(e, d_weight_j, (T)1.0, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = nblocks * nthreads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(nthreads.get(2), nthreads.get(1),
                                            nthreads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             fill<weighted, T>(e, d_weight_j, (T)1.0, item_ct1);
           });
     });
"
107,../oneAPI-DirectProgramming-training/jaccard/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(nblocks * nthreads, nthreads),
                        [=](sycl::nd_item<3> item_ct1) {
                          fill<false, T>(e, d_weight_i, (T)0.0, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = nblocks * nthreads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(nthreads.get(2), nthreads.get(1),
                                            nthreads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             fill<false, T>(e, d_weight_i, (T)0.0, item_ct1);
           });
     });
"
108,../oneAPI-DirectProgramming-training/jaccard/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(nblocks * nthreads, nthreads),
                        [=](sycl::nd_item<3> item_ct1) {
                          jaccard_row_sum<weighted, T>(n, d_csrPtr, d_csrInd,
                                                       d_weight_j, d_work,
                                                       item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = nblocks * nthreads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(nthreads.get(2), nthreads.get(1),
                                            nthreads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             jaccard_row_sum<weighted, T>(n, d_csrPtr, d_csrInd, d_weight_j,
                                          d_work, item_ct1);
           });
     });
"
109,../oneAPI-DirectProgramming-training/jaccard/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(nblocks * nthreads, nthreads),
                        [=](sycl::nd_item<3> item_ct1) {
                          jaccard_is<weighted, T>(n, e, d_csrPtr, d_csrInd,
                                                  d_weight_j, d_work, d_weight_i,
                                                  d_weight_s, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = nblocks * nthreads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(nthreads.get(2), nthreads.get(1),
                                            nthreads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             jaccard_is<weighted, T>(n, e, d_csrPtr, d_csrInd, d_weight_j,
                                     d_work, d_weight_i, d_weight_s, item_ct1);
           });
     });
"
110,../oneAPI-DirectProgramming-training/jaccard/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(nblocks * nthreads, nthreads),
                        [=](sycl::nd_item<3> item_ct1) {
                          jaccard_jw<weighted, T>(e, d_csrVal, gamma, d_weight_i,
                                                  d_weight_s, d_weight_j,
                                                  item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = nblocks * nthreads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(nthreads.get(2), nthreads.get(1),
                                            nthreads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             jaccard_jw<weighted, T>(e, d_csrVal, gamma, d_weight_i, d_weight_s,
                                     d_weight_j, item_ct1);
           });
     });
"
111,../oneAPI-DirectProgramming-training/jenkins-hash/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel(d_lens, d_initvals, d_keys, d_out, N, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             kernel(d_lens, d_initvals, d_keys, d_out, N, item_ct1);
           });
     });
"
112,../oneAPI-DirectProgramming-training/kmeans/dpcpp/cluster.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          feature_transpose(d_feature_swap, d_feature, nfeatures,
                                            npoints, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             feature_transpose(d_feature_swap, d_feature, nfeatures, npoints,
                               item_ct1);
           });
     });
"
113,../oneAPI-DirectProgramming-training/kmeans/dpcpp/cluster.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
           cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                            [=](sycl::nd_item<3> item_ct1) {
                              find_membership(d_feature_swap, d_clusters,
                                              d_membership, nclusters, nfeatures,
                                              npoints, item_ct1);
                            });
         });
","         q_ct1.submit([&](sycl::handler &cgh) {
           auto dpct_global_range = grids * threads;
 
           cgh.parallel_for(
               sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                dpct_global_range.get(1),
                                                dpct_global_range.get(0)),
                                 sycl::range<3>(threads.get(2), threads.get(1),
                                                threads.get(0))),
               [=](sycl::nd_item<3> item_ct1) {
                 find_membership(d_feature_swap, d_clusters, d_membership,
                                 nclusters, nfeatures, npoints, item_ct1);
               });
         });
"
114,../oneAPI-DirectProgramming-training/knn/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
115,../oneAPI-DirectProgramming-training/knn/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
116,../oneAPI-DirectProgramming-training/knn/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::range<2> shared_A_range_ct1(16 /*BLOCK_DIM*/, 16 /*BLOCK_DIM*/);
 
     sycl::accessor<float, 2, sycl::access::mode::read_write,
                    sycl::access::target::local>
         shared_A_acc_ct1(shared_A_range_ct1, cgh);
     sycl::accessor<float, 2, sycl::access::mode::read_write,
                    sycl::access::target::local>
         shared_B_acc_ct1(shared_B_range_ct1, cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         begin_A_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         begin_B_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         step_A_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         step_B_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         end_A_acc_ct1(cgh);
 
     cgh.parallel_for(
         sycl::nd_range<3>(g_16x16 * t_16x16, t_16x16),
         [=](sycl::nd_item<3> item_ct1) {
           cuComputeDistanceGlobal(
               ref_dev, ref_width, query_dev, query_width, height, dist_dev,
               item_ct1,
               dpct::accessor<float, dpct::local, 2>(shared_A_acc_ct1,
                                                     shared_A_range_ct1),
               dpct::accessor<float, dpct::local, 2>(shared_B_acc_ct1,
                                                     shared_B_range_ct1),
               begin_A_acc_ct1.get_pointer(), begin_B_acc_ct1.get_pointer(),
               step_A_acc_ct1.get_pointer(), step_B_acc_ct1.get_pointer(),
               end_A_acc_ct1.get_pointer());
         });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     sycl::range<2> shared_A_range_ct1(16 /*BLOCK_DIM*/, 16 /*BLOCK_DIM*/);
 
     sycl::accessor<float, 2, sycl::access::mode::read_write,
                    sycl::access::target::local>
         shared_A_acc_ct1(shared_A_range_ct1, cgh);
     sycl::accessor<float, 2, sycl::access::mode::read_write,
                    sycl::access::target::local>
         shared_B_acc_ct1(shared_B_range_ct1, cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         begin_A_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         begin_B_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         step_A_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         step_B_acc_ct1(cgh);
     sycl::accessor<int, 0, sycl::access::mode::read_write,
                    sycl::access::target::local>
         end_A_acc_ct1(cgh);
 
     auto dpct_global_range = g_16x16 * t_16x16;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(t_16x16.get(2), t_16x16.get(1), t_16x16.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           cuComputeDistanceGlobal(
               ref_dev, ref_width, query_dev, query_width, height, dist_dev,
               item_ct1,
               dpct::accessor<float, dpct::local, 2>(shared_A_acc_ct1,
                                                     shared_A_range_ct1),
               dpct::accessor<float, dpct::local, 2>(shared_B_acc_ct1,
                                                     shared_B_range_ct1),
               begin_A_acc_ct1.get_pointer(), begin_B_acc_ct1.get_pointer(),
               step_A_acc_ct1.get_pointer(), step_B_acc_ct1.get_pointer(),
               end_A_acc_ct1.get_pointer());
         });
   });
"
117,../oneAPI-DirectProgramming-training/knn/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(sycl::nd_range<3>(g_256x1 * t_256x1, t_256x1),
                      [=](sycl::nd_item<3> item_ct1) {
                        cuInsertionSort(dist_dev, ind_dev, query_width,
                                        ref_width, k, item_ct1);
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = g_256x1 * t_256x1;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(t_256x1.get(2), t_256x1.get(1), t_256x1.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           cuInsertionSort(dist_dev, ind_dev, query_width, ref_width, k,
                           item_ct1);
         });
   });
"
118,../oneAPI-DirectProgramming-training/knn/dpcpp/main.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(sycl::nd_range<3>(g_k_16x16 * t_k_16x16, t_k_16x16),
                      [=](sycl::nd_item<3> item_ct1) {
                        cuParallelSqrt(dist_dev, query_width, k, item_ct1);
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = g_k_16x16 * t_k_16x16;
 
     cgh.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                          dpct_global_range.get(1),
                                          dpct_global_range.get(0)),
                           sycl::range<3>(t_k_16x16.get(2), t_k_16x16.get(1),
                                          t_k_16x16.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           cuParallelSqrt(dist_dev, query_width, k, item_ct1);
         });
   });
"
119,../oneAPI-DirectProgramming-training/lanczos/dpcpp/lanczos.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
120,../oneAPI-DirectProgramming-training/lanczos/dpcpp/lanczos.dp.cpp,"         item_ct1.barrier();
","         item_ct1.barrier();
"
121,../oneAPI-DirectProgramming-training/laplace/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                        [=](sycl::nd_item<3> item_ct1) {
                          red_kernel(aP_d, aW_d, aE_d, aS_d, aN_d, b_d,
                                     temp_black_d, temp_red_d, bl_norm_L2_d,
                                     item_ct1);
                        });
     });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range = dimGrid * dimBlock;
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(dimBlock.get(2),
                                                  dimBlock.get(1),
                                                  dimBlock.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     red_kernel(aP_d, aW_d, aE_d, aS_d, aN_d, b_d, temp_black_d,
                                temp_red_d, bl_norm_L2_d, item_ct1);
                 });
         });
"
122,../oneAPI-DirectProgramming-training/laplace/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                        [=](sycl::nd_item<3> item_ct1) {
                          black_kernel(aP_d, aW_d, aE_d, aS_d, aN_d, b_d,
                                       temp_red_d, temp_black_d, bl_norm_L2_d,
                                       item_ct1);
                        });
     });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range = dimGrid * dimBlock;
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(dimBlock.get(2),
                                                  dimBlock.get(1),
                                                  dimBlock.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     black_kernel(aP_d, aW_d, aE_d, aS_d, aN_d, b_d, temp_red_d,
                                  temp_black_d, bl_norm_L2_d, item_ct1);
                 });
         });
"
123,../oneAPI-DirectProgramming-training/libor/dpcpp/main.dp.cpp,"     /*
","     /*
"
124,../oneAPI-DirectProgramming-training/libor/dpcpp/main.dp.cpp,"     /*
","     /*
"
125,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
126,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
127,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
128,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
129,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
130,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
131,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
132,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
133,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grid_F * block_F, block_F),
                        [=](sycl::nd_item<3> item_ct1) {
                          calculate_F(dt, u_d, v_d, F_d, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grid_F * block_F;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(block_F.get(2), block_F.get(1), block_F.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             calculate_F(dt, u_d, v_d, F_d, item_ct1);
           });
     });
"
134,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grid_G * block_G, block_G),
                        [=](sycl::nd_item<3> item_ct1) {
                          calculate_G(dt, u_d, v_d, G_d, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grid_G * block_G;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(block_G.get(2), block_G.get(1), block_G.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             calculate_G(dt, u_d, v_d, G_d, item_ct1);
           });
     });
"
135,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<Real, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       cgh.parallel_for(sycl::nd_range<3>(grid_pr * block_pr, block_pr),
                        [=](sycl::nd_item<3> item_ct1) {
                          sum_pressure(pres_red_d, pres_black_d, pres_sum_d,
                                       item_ct1,
                                       sum_cache_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<Real, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       auto dpct_global_range = grid_pr * block_pr;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(block_pr.get(2), block_pr.get(1),
                                            block_pr.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             sum_pressure(pres_red_d, pres_black_d, pres_sum_d, item_ct1,
                          sum_cache_acc_ct1.get_pointer());
           });
     });
"
136,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(grid_hpbc * block_hpbc, block_hpbc),
                          [=](sycl::nd_item<3> item_ct1) {
                            set_horz_pres_BCs(pres_red_d, pres_black_d,
                                              item_ct1);
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = grid_hpbc * block_hpbc;
 
         cgh.parallel_for(
             sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                              dpct_global_range.get(1),
                                              dpct_global_range.get(0)),
                               sycl::range<3>(block_hpbc.get(2),
                                              block_hpbc.get(1),
                                              block_hpbc.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               set_horz_pres_BCs(pres_red_d, pres_black_d, item_ct1);
             });
       });
"
137,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(grid_vpbc * block_hpbc, block_hpbc),
                          [=](sycl::nd_item<3> item_ct1) {
                            set_vert_pres_BCs(pres_red_d, pres_black_d,
                                              item_ct1);
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = grid_vpbc * block_hpbc;
 
         cgh.parallel_for(
             sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                              dpct_global_range.get(1),
                                              dpct_global_range.get(0)),
                               sycl::range<3>(block_hpbc.get(2),
                                              block_hpbc.get(1),
                                              block_hpbc.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               set_vert_pres_BCs(pres_red_d, pres_black_d, item_ct1);
             });
       });
"
138,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(grid_pr * block_pr, block_pr),
                          [=](sycl::nd_item<3> item_ct1) {
                            red_kernel(dt, F_d, G_d, pres_black_d, pres_red_d,
                                       item_ct1);
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = grid_pr * block_pr;
 
         cgh.parallel_for(
             sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                              dpct_global_range.get(1),
                                              dpct_global_range.get(0)),
                               sycl::range<3>(block_pr.get(2), block_pr.get(1),
                                              block_pr.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               red_kernel(dt, F_d, G_d, pres_black_d, pres_red_d, item_ct1);
             });
       });
"
139,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(grid_pr * block_pr, block_pr),
                          [=](sycl::nd_item<3> item_ct1) {
                            black_kernel(dt, F_d, G_d, pres_red_d, pres_black_d,
                                         item_ct1);
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         auto dpct_global_range = grid_pr * block_pr;
 
         cgh.parallel_for(
             sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                              dpct_global_range.get(1),
                                              dpct_global_range.get(0)),
                               sycl::range<3>(block_pr.get(2), block_pr.get(1),
                                              block_pr.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               black_kernel(dt, F_d, G_d, pres_red_d, pres_black_d, item_ct1);
             });
       });
"
140,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         sycl::accessor<Real, 1, sycl::access::mode::read_write,
                        sycl::access::target::local>
 
         cgh.parallel_for(sycl::nd_range<3>(grid_pr * block_pr, block_pr),
                          [=](sycl::nd_item<3> item_ct1) {
                            calc_residual(dt, F_d, G_d, pres_red_d, pres_black_d,
                                          res_d, item_ct1,
                                          sum_cache_acc_ct1.get_pointer());
                          });
       });
","       q_ct1.submit([&](sycl::handler &cgh) {
         sycl::accessor<Real, 1, sycl::access::mode::read_write,
                        sycl::access::target::local>
 
         auto dpct_global_range = grid_pr * block_pr;
 
         cgh.parallel_for(
             sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                              dpct_global_range.get(1),
                                              dpct_global_range.get(0)),
                               sycl::range<3>(block_pr.get(2), block_pr.get(1),
                                              block_pr.get(0))),
             [=](sycl::nd_item<3> item_ct1) {
               calc_residual(dt, F_d, G_d, pres_red_d, pres_black_d, res_d,
                             item_ct1, sum_cache_acc_ct1.get_pointer());
             });
       });
"
141,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<Real, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       cgh.parallel_for(sycl::nd_range<3>(grid_pr * block_pr, block_pr),
                        [=](sycl::nd_item<3> item_ct1) {
                          calculate_u(dt, F_d, pres_red_d, pres_black_d, u_d,
                                      max_u_d, item_ct1,
                                      max_cache_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<Real, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       auto dpct_global_range = grid_pr * block_pr;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(block_pr.get(2), block_pr.get(1),
                                            block_pr.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             calculate_u(dt, F_d, pres_red_d, pres_black_d, u_d, max_u_d,
                         item_ct1, max_cache_acc_ct1.get_pointer());
           });
     });
"
142,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<Real, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       cgh.parallel_for(sycl::nd_range<3>(grid_pr * block_pr, block_pr),
                        [=](sycl::nd_item<3> item_ct1) {
                          calculate_v(dt, G_d, pres_red_d, pres_black_d, v_d,
                                      max_v_d, item_ct1,
                                      max_cache_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<Real, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
 
       auto dpct_global_range = grid_pr * block_pr;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(block_pr.get(2), block_pr.get(1),
                                            block_pr.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             calculate_v(dt, G_d, pres_red_d, pres_black_d, v_d, max_v_d,
                         item_ct1, max_cache_acc_ct1.get_pointer());
           });
     });
"
143,../oneAPI-DirectProgramming-training/lid-driven-cavity/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grid_bcs * block_bcs, block_bcs),
                        [=](sycl::nd_item<3> item_ct1) {
                          set_BCs(u_d, v_d, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grid_bcs * block_bcs;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(block_bcs.get(2), block_bcs.get(1),
                                            block_bcs.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             set_BCs(u_d, v_d, item_ct1);
           });
     });
"
144,../oneAPI-DirectProgramming-training/lombscargle/dpcpp/main.dp.cpp,"       /*
","       /*
"
145,../oneAPI-DirectProgramming-training/lombscargle/dpcpp/main.dp.cpp,"     /*
","     /*
"
146,../oneAPI-DirectProgramming-training/lombscargle/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          lombscargle(x_shape, freqs_shape, d_x, d_y, d_f, d_p,
                                      y_dot, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             lombscargle(x_shape, freqs_shape, d_x, d_y, d_f, d_p, y_dot,
                         item_ct1);
           });
     });
"
147,../oneAPI-DirectProgramming-training/lud/dpcpp/lud_kernels.dp.cpp,"   item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
148,../oneAPI-DirectProgramming-training/lud/dpcpp/lud_kernels.dp.cpp,"     item_ct1.barrier();
","         item_ct1.barrier(sycl::access::fence_space::local_space);
"
149,../oneAPI-DirectProgramming-training/lud/dpcpp/lud_kernels.dp.cpp,"     item_ct1.barrier();
","         item_ct1.barrier(sycl::access::fence_space::local_space);
"
150,../oneAPI-DirectProgramming-training/lud/dpcpp/lud_kernels.dp.cpp,"   item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
151,../oneAPI-DirectProgramming-training/lud/dpcpp/lud_kernels.dp.cpp,"   item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
152,../oneAPI-DirectProgramming-training/lud/dpcpp/lud_kernels.dp.cpp,"   item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
153,../oneAPI-DirectProgramming-training/maxpool3d/dpcpp/main.dp.cpp,"     /*
","     /*
"
154,../oneAPI-DirectProgramming-training/md/dpcpp/MD.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
         auto maxNeighbors_ct4 = maxNeighbors;
 
         cgh.parallel_for(
             sycl::nd_range<3>(
                 sycl::range<3>(1, 1, (globalSize + localSize - 1) / localSize) *
                     sycl::range<3>(1, 1, localSize),
                 sycl::range<3>(1, 1, localSize)),
             [=](sycl::nd_item<3> item_ct1) {
                 md(d_position, d_force, d_neighborList, nAtom, maxNeighbors_ct4,
                    lj1_t, lj2_t, cutsq_t, item_ct1);
             });
     });
","           q_ct1.submit([&](sycl::handler &cgh) {
                     auto maxNeighbors_ct4 = maxNeighbors;
 
                     cgh.parallel_for(
                         sycl::nd_range<3>(
                             sycl::range<3>(1, 1,
                                            (globalSize + localSize - 1) /
                                                localSize) *
                                 sycl::range<3>(1, 1, localSize),
                             sycl::range<3>(1, 1, localSize)),
                         [=](sycl::nd_item<3> item_ct1) {
                                   md(d_position, d_force, d_neighborList, nAtom,
                                      maxNeighbors_ct4, lj1_t, lj2_t, cutsq_t,
                                      item_ct1);
                         });
           });
"
155,../oneAPI-DirectProgramming-training/md/dpcpp/MD.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             auto maxNeighbors_ct4 = maxNeighbors;
 
             cgh.parallel_for(
                 sycl::nd_range<3>(
                     sycl::range<3>(1, 1,
                                    (globalSize + localSize - 1) / localSize) *
                         sycl::range<3>(1, 1, localSize),
                     sycl::range<3>(1, 1, localSize)),
                 [=](sycl::nd_item<3> item_ct1) {
                     md(d_position, d_force, d_neighborList, nAtom,
                        maxNeighbors_ct4, lj1_t, lj2_t, cutsq_t, item_ct1);
                 });
         });
","                     q_ct1.submit([&](sycl::handler &cgh) {
                               auto maxNeighbors_ct4 = maxNeighbors;
 
                               cgh.parallel_for(
                                   sycl::nd_range<3>(
                                       sycl::range<3>(
                                           1, 1,
                                           (globalSize + localSize - 1) /
                                               localSize) *
                                           sycl::range<3>(1, 1, localSize),
                                       sycl::range<3>(1, 1, localSize)),
                                   [=](sycl::nd_item<3> item_ct1) {
                                             md(d_position, d_force,
                                                d_neighborList, nAtom,
                                                maxNeighbors_ct4, lj1_t, lj2_t,
                                                cutsq_t, item_ct1);
                                   });
                     });
"
156,../oneAPI-DirectProgramming-training/md5hash/dpcpp/MD5Hash.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, nblocks) *
                                                sycl::range<3>(1, 1, nthreads),
                                            sycl::range<3>(1, 1, nthreads)),
                          [=](sycl::nd_item<3> item_ct1) {
                              md5hash_kernel(d_foundIndex, d_foundKey,
                                             d_foundDigest, keyspace, byteLength,
                                             valsPerByte, searchDigest0,
                                             searchDigest1, searchDigest2,
                                             searchDigest3, item_ct1);
                          });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, nblocks) *
                                                sycl::range<3>(1, 1, nthreads),
                                            sycl::range<3>(1, 1, nthreads)),
                          [=](sycl::nd_item<3> item_ct1) {
                              md5hash_kernel(d_foundIndex, d_foundKey,
                                             d_foundDigest, keyspace, byteLength,
                                             valsPerByte, searchDigest0,
                                             searchDigest1, searchDigest2,
                                             searchDigest3, item_ct1);
                          });
     });
"
157,../oneAPI-DirectProgramming-training/medianfilter/dpcpp/main.dp.cpp,"   /*
","   /*
"
158,../oneAPI-DirectProgramming-training/medianfilter/dpcpp/MedianFilter.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
159,../oneAPI-DirectProgramming-training/memcpy/dpcpp/main.dp.cpp,"     /*
","     /*
"
160,../oneAPI-DirectProgramming-training/memcpy/dpcpp/main.dp.cpp,"     /*
","     /*
"
161,../oneAPI-DirectProgramming-training/memcpy/dpcpp/main.dp.cpp,"       /*
","       /*
"
162,../oneAPI-DirectProgramming-training/memcpy/dpcpp/main.dp.cpp,"     /*
","     /*
"
163,../oneAPI-DirectProgramming-training/memcpy/dpcpp/main.dp.cpp,"     /*
","     /*
"
164,../oneAPI-DirectProgramming-training/memcpy/dpcpp/main.dp.cpp,"     /*
","     /*
"
165,../oneAPI-DirectProgramming-training/memcpy/dpcpp/main.dp.cpp,"     /*
","     /*
"
166,../oneAPI-DirectProgramming-training/mt/dpcpp/MT.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(gridBlocks * threadBlocks, threadBlocks),
           [=](sycl::nd_item<3> item_ct1) {
             mt(d_MT, d_Rand, nPerRng, item_ct1);
           });
     });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range = gridBlocks * threadBlocks;
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(threadBlocks.get(2),
                                                  threadBlocks.get(1),
                                                  threadBlocks.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     mt(d_MT, d_Rand, nPerRng, item_ct1);
                 });
         });
"
167,../oneAPI-DirectProgramming-training/mt/dpcpp/MT.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(gridBlocks * threadBlocks, threadBlocks),
           [=](sycl::nd_item<3> item_ct1) {
             boxmuller(d_Rand, nPerRng, item_ct1);
           });
     });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range = gridBlocks * threadBlocks;
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(threadBlocks.get(2),
                                                  threadBlocks.get(1),
                                                  threadBlocks.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     boxmuller(d_Rand, nPerRng, item_ct1);
                 });
         });
"
168,../oneAPI-DirectProgramming-training/multimaterial/dpcpp/compact.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(sycl::range<3>(blocks) *
                                           sycl::range<3>(threads),
                                       sycl::range<3>(threads)),
                     [=](sycl::nd_item<3> item_ct1) {
                             ccc_loop1(d_imaterial, d_nextfrac, d_rho_compact,
                                       d_rho_compact_list, d_Vf_compact_list,
                                       d_V, d_rho_ave_compact, sizex, sizey,
                                       d_mmc_index, item_ct1);
                     });
         });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = sycl::range<3>(blocks) * sycl::range<3>(threads);
     auto dpct_local_range = sycl::range<3>(threads);
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(dpct_local_range.get(2), dpct_local_range.get(1),
                            dpct_local_range.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           ccc_loop1(d_imaterial, d_nextfrac, d_rho_compact, d_rho_compact_list,
                     d_Vf_compact_list, d_V, d_rho_ave_compact, sizex, sizey,
                     d_mmc_index, item_ct1);
         });
   });
"
169,../oneAPI-DirectProgramming-training/multimaterial/dpcpp/compact.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(
                         sycl::range<3>(1, 1,
                                        (mmc_cells - 1) / (thx * thy) + 1) *
                             sycl::range<3>(1, 1, (thx * thy)),
                         sycl::range<3>(1, 1, (thx * thy))),
                     [=](sycl::nd_item<3> item_ct1) {
                             ccc_loop1_2(d_rho_compact_list, d_Vf_compact_list,
                                         d_V, d_rho_ave_compact, d_mmc_index,
                                         mmc_cells, d_mmc_i, d_mmc_j, sizex,
                                         sizey, item_ct1);
                     });
         });
","   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(1, 1, (mmc_cells - 1) / (thx * thy) + 1) *
                 sycl::range<3>(1, 1, (thx * thy)),
             sycl::range<3>(1, 1, (thx * thy))),
         [=](sycl::nd_item<3> item_ct1) {
           ccc_loop1_2(d_rho_compact_list, d_Vf_compact_list, d_V,
                       d_rho_ave_compact, d_mmc_index, mmc_cells, d_mmc_i,
                       d_mmc_j, sizex, sizey, item_ct1);
         });
   });
"
170,../oneAPI-DirectProgramming-training/multimaterial/dpcpp/compact.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(sycl::range<3>(blocks) *
                                           sycl::range<3>(threads),
                                       sycl::range<3>(threads)),
                     [=](sycl::nd_item<3> item_ct1) {
                             ccc_loop2(d_imaterial, d_matids, d_nextfrac,
                                       d_rho_compact, d_rho_compact_list,
                                       d_t_compact, d_t_compact_list,
                                       d_Vf_compact_list, d_n, d_p_compact,
                                       d_p_compact_list, sizex, sizey,
                                       d_mmc_index, item_ct1);
                     });
         });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = sycl::range<3>(blocks) * sycl::range<3>(threads);
     auto dpct_local_range = sycl::range<3>(threads);
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(dpct_local_range.get(2), dpct_local_range.get(1),
                            dpct_local_range.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           ccc_loop2(d_imaterial, d_matids, d_nextfrac, d_rho_compact,
                     d_rho_compact_list, d_t_compact, d_t_compact_list,
                     d_Vf_compact_list, d_n, d_p_compact, d_p_compact_list,
                     sizex, sizey, d_mmc_index, item_ct1);
         });
   });
"
171,../oneAPI-DirectProgramming-training/multimaterial/dpcpp/compact.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(
                         sycl::range<3>(1, 1, (mm_len - 1) / (thx * thy) + 1) *
                             sycl::range<3>(1, 1, (thx * thy)),
                         sycl::range<3>(1, 1, (thx * thy))),
                     [=](sycl::nd_item<3> item_ct1) {
                             ccc_loop2_2(d_matids, d_rho_compact_list,
                                         d_t_compact_list, d_Vf_compact_list,
                                         d_n, d_p_compact_list, d_mmc_index,
                                         mm_len, item_ct1);
                     });
         });
","   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(1, 1, (mm_len - 1) / (thx * thy) + 1) *
                               sycl::range<3>(1, 1, (thx * thy)),
                           sycl::range<3>(1, 1, (thx * thy))),
         [=](sycl::nd_item<3> item_ct1) {
           ccc_loop2_2(d_matids, d_rho_compact_list, d_t_compact_list,
                       d_Vf_compact_list, d_n, d_p_compact_list, d_mmc_index,
                       mm_len, item_ct1);
         });
   });
"
172,../oneAPI-DirectProgramming-training/multimaterial/dpcpp/compact.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
                 cgh.parallel_for(
                     sycl::nd_range<3>(sycl::range<3>(blocks) *
                                           sycl::range<3>(threads),
                                       sycl::range<3>(threads)),
                     [=](sycl::nd_item<3> item_ct1) {
                             ccc_loop3(d_imaterial, d_nextfrac, d_matids,
                                       d_rho_compact, d_rho_compact_list,
                                       d_rho_mat_ave_compact,
                                       d_rho_mat_ave_compact_list, d_x, d_y,
                                       sizex, sizey, d_mmc_index, item_ct1);
                     });
         });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = sycl::range<3>(blocks) * sycl::range<3>(threads);
     auto dpct_local_range = sycl::range<3>(threads);
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(dpct_local_range.get(2), dpct_local_range.get(1),
                            dpct_local_range.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           ccc_loop3(d_imaterial, d_nextfrac, d_matids, d_rho_compact,
                     d_rho_compact_list, d_rho_mat_ave_compact,
                     d_rho_mat_ave_compact_list, d_x, d_y, sizex, sizey,
                     d_mmc_index, item_ct1);
         });
   });
"
173,../oneAPI-DirectProgramming-training/murmurhash3/dpcpp/murmurhash3.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(gridDim * blockDim, blockDim),
                        [=](sycl::nd_item<3> item_ct1) {
                          MurmurHash3_x64_128_kernel(dev_keys, dev_length,
                                                     key_length, dev_out,
                                                     numKeys, item_ct1);
                        });
     });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = gridDim * blockDim;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(blockDim.get(2), blockDim.get(1), blockDim.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           MurmurHash3_x64_128_kernel(dev_keys, dev_length, key_length, dev_out,
                                      numKeys, item_ct1);
         });
   });
"
174,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   *pointsbitmap =
","   *pointsbitmap =
"
175,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
176,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
177,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
178,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
179,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
180,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
181,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
182,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"     /*
","     /*
"
183,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
184,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"     /*
","     /*
"
185,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
186,../oneAPI-DirectProgramming-training/nms/dpcpp/main.dp.cpp,"   /*
","   /*
"
187,../oneAPI-DirectProgramming-training/nn/dpcpp/nearestNeighbor.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(sycl::nd_range<3>(gridDim * blockDim, blockDim),
                      [=](sycl::nd_item<3> item_ct1) {
                        nn(numRecords, lat, lng, d_locations, d_distances,
                           item_ct1);
                      });
   });
","   q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = gridDim * blockDim;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(blockDim.get(2), blockDim.get(1), blockDim.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
           nn(numRecords, lat, lng, d_locations, d_distances, item_ct1);
         });
   });
"
188,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
189,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
190,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
191,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
192,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"      item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
193,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
194,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"      item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
195,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"    item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
196,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"    item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
197,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"    item_ct1.barrier();
","   item_ct1.barrier(sycl::access::fence_space::local_space);
"
198,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"       item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
199,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"       item_ct1.barrier();
","     item_ct1.barrier(sycl::access::fence_space::local_space);
"
200,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           input_itemsets_l_acc_ct1(
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
                               cgh);
 
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, global_work) *
                                              sycl::range<3>(1, 1, local_work),
                                          sycl::range<3>(1, 1, local_work)),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel1(d_input_itemsets, d_reference, offset_r,
                                  offset_c, max_cols, blk, penalty, item_ct1,
                                  input_itemsets_l_acc_ct1.get_pointer(),
                                  reference_l_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           input_itemsets_l_acc_ct1(
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
                               cgh);
 
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, global_work) *
                                              sycl::range<3>(1, 1, local_work),
                                          sycl::range<3>(1, 1, local_work)),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel1(d_input_itemsets, d_reference, offset_r,
                                  offset_c, max_cols, blk, penalty, item_ct1,
                                  input_itemsets_l_acc_ct1.get_pointer(),
                                  reference_l_acc_ct1.get_pointer());
                        });
     });
"
201,../oneAPI-DirectProgramming-training/nw/dpcpp/nw.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           input_itemsets_l_acc_ct1(
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
                               cgh);
 
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, global_work) *
                                              sycl::range<3>(1, 1, local_work),
                                          sycl::range<3>(1, 1, local_work)),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel2(d_input_itemsets, d_reference, block_width,
                                  offset_r, offset_c, max_cols, blk, penalty,
                                  item_ct1,
                                  input_itemsets_l_acc_ct1.get_pointer(),
                                  reference_l_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           input_itemsets_l_acc_ct1(
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
                               cgh);
 
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, global_work) *
                                              sycl::range<3>(1, 1, local_work),
                                          sycl::range<3>(1, 1, local_work)),
                        [=](sycl::nd_item<3> item_ct1) {
                          kernel2(d_input_itemsets, d_reference, block_width,
                                  offset_r, offset_c, max_cols, blk, penalty,
                                  item_ct1,
                                  input_itemsets_l_acc_ct1.get_pointer(),
                                  reference_l_acc_ct1.get_pointer());
                        });
     });
"
202,../oneAPI-DirectProgramming-training/page-rank/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, num_blocks) *
                                              sycl::range<3>(1, 1, block_size),
                                          sycl::range<3>(1, 1, block_size)),
                        [=](sycl::nd_item<3> item_ct1) {
                          map(d_pages, d_page_ranks, d_maps, d_noutlinks, n,
                              item_ct1);
                        });
     });
","   q_ct1.submit([&](sycl::handler &cgh) {
    cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, num_blocks) *
                                           sycl::range<3>(1, 1, block_size),
                                       sycl::range<3>(1, 1, block_size)),
                     [=](sycl::nd_item<3> item_ct1) {
                      map(d_pages, d_page_ranks, d_maps, d_noutlinks, n,
                          item_ct1);
                     });
   });
"
203,../oneAPI-DirectProgramming-training/page-rank/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, num_blocks) *
                                              sycl::range<3>(1, 1, block_size),
                                          sycl::range<3>(1, 1, block_size)),
                        [=](sycl::nd_item<3> item_ct1) {
                          reduce(d_page_ranks, d_maps, n, d_diffs, item_ct1);
                        });
     });
","   q_ct1.submit([&](sycl::handler &cgh) {
    cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, num_blocks) *
                                           sycl::range<3>(1, 1, block_size),
                                       sycl::range<3>(1, 1, block_size)),
                     [=](sycl::nd_item<3> item_ct1) {
                      reduce(d_page_ranks, d_maps, n, d_diffs, item_ct1);
                     });
   });
"
204,../oneAPI-DirectProgramming-training/pathfinder/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
205,../oneAPI-DirectProgramming-training/pathfinder/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
206,../oneAPI-DirectProgramming-training/pathfinder/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
207,../oneAPI-DirectProgramming-training/pathfinder/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           prev_acc_ct1(sycl::range<1>(250), cgh);
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           result_acc_ct1(sycl::range<1>(250), cgh);
 
       cgh.parallel_for(sycl::nd_range<3>(gridDim * blockDim, blockDim),
                        [=](sycl::nd_item<3> item_ct1) {
                          pathfinder(d_gpuWall, d_gpuSrc, d_gpuResult,
                                     d_outputBuffer, iteration, theHalo,
                                     borderCols, cols, t, item_ct1,
                                     prev_acc_ct1.get_pointer(),
                                     result_acc_ct1.get_pointer());
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           prev_acc_ct1(sycl::range<1>(250), cgh);
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           result_acc_ct1(sycl::range<1>(250), cgh);
 
       auto dpct_global_range = gridDim * blockDim;
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                            dpct_global_range.get(1),
                                            dpct_global_range.get(0)),
                             sycl::range<3>(blockDim.get(2), blockDim.get(1),
                                            blockDim.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             pathfinder(d_gpuWall, d_gpuSrc, d_gpuResult, d_outputBuffer,
                        iteration, theHalo, borderCols, cols, t, item_ct1,
                        prev_acc_ct1.get_pointer(),
                        result_acc_ct1.get_pointer());
           });
     });
"
208,../oneAPI-DirectProgramming-training/popcount/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          pc1(d_data, d_result, length, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             pc1(d_data, d_result, length, item_ct1);
           });
     });
"
209,../oneAPI-DirectProgramming-training/popcount/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          pc2(d_data, d_result, length, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             pc2(d_data, d_result, length, item_ct1);
           });
     });
"
210,../oneAPI-DirectProgramming-training/popcount/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          pc3(d_data, d_result, length, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             pc3(d_data, d_result, length, item_ct1);
           });
     });
"
211,../oneAPI-DirectProgramming-training/popcount/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          pc4(d_data, d_result, length, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             pc4(d_data, d_result, length, item_ct1);
           });
     });
"
212,../oneAPI-DirectProgramming-training/popcount/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          pc5(d_data, d_result, length, item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = grids * threads;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             pc5(d_data, d_result, length, item_ct1);
           });
     });
"
213,../oneAPI-DirectProgramming-training/qtclustering/dpcpp/QTC.dp.cpp,"   q_ct1.submit([&](sycl::handler &cgh) {
     cgh.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(1, 1, thread_block_count) *
                               sycl::range<3>(1, 1, tpb),
                           sycl::range<3>(1, 1, tpb)),
         [=](sycl::nd_item<3> item_ct1) {
           compute_degrees((int *)indr_mtrx, (int *)degrees, point_count,
                           max_degree, item_ct1);
         });
   });
","    q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, thread_block_count) *
                                 sycl::range<3>(1, 1, tpb),
                             sycl::range<3>(1, 1, tpb)),
           [=](sycl::nd_item<3> item_ct1) {
              compute_degrees((int *)indr_mtrx, (int *)degrees, point_count,
                              max_degree, item_ct1);
           });
    });
"
214,../oneAPI-DirectProgramming-training/qtclustering/dpcpp/QTC.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<float, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           dist_array_acc_ct1(sycl::range<1>(64 /*THREADSPERBLOCK*/), cgh);
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           point_index_array_acc_ct1(sycl::range<1>(64 /*THREADSPERBLOCK*/),
                                     cgh);
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, thread_block_count) *
                                 sycl::range<3>(1, 1, tpb),
                             sycl::range<3>(1, 1, tpb)),
           [=](sycl::nd_item<3> item_ct1) {
             QTC_device((float *)distance_matrix, (char *)Ai_mask,
                        (char *)clustered_pnts_mask, (int *)indr_mtrx,
                        (int *)cardnl, (int *)ungrpd_pnts_indr,
                        (float *)dist_to_clust, (int *)degrees, point_count,
                        max_point_count, max_degree, threshold, cwrank,
                        active_node_count, total_thread_block_count, item_ct1,
                        dist_array_acc_ct1.get_pointer(),
                        point_index_array_acc_ct1.get_pointer());
           });
     });
","       q_ct1.submit([&](sycl::handler &cgh) {
          sycl::accessor<float, 1, sycl::access::mode::read_write,
                         sycl::access::target::local>
          sycl::accessor<int, 1, sycl::access::mode::read_write,
                         sycl::access::target::local>
                                        cgh);
 
          cgh.parallel_for(
              sycl::nd_range<3>(sycl::range<3>(1, 1, thread_block_count) *
                                    sycl::range<3>(1, 1, tpb),
                                sycl::range<3>(1, 1, tpb)),
              [=](sycl::nd_item<3> item_ct1) {
                 QTC_device((float *)distance_matrix, (char *)Ai_mask,
                            (char *)clustered_pnts_mask, (int *)indr_mtrx,
                            (int *)cardnl, (int *)ungrpd_pnts_indr,
                            (float *)dist_to_clust, (int *)degrees, point_count,
                            max_point_count, max_degree, threshold, cwrank,
                            active_node_count, total_thread_block_count,
                            item_ct1, dist_array_acc_ct1.get_pointer(),
                            point_index_array_acc_ct1.get_pointer());
              });
       });
"
215,../oneAPI-DirectProgramming-training/qtclustering/dpcpp/QTC.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<float, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           dist_array_acc_ct1(sycl::range<1>(64 /*THREADSPERBLOCK*/), cgh);
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           point_index_array_acc_ct1(sycl::range<1>(64 /*THREADSPERBLOCK*/),
                                     cgh);
       sycl::accessor<int, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           tmp_pnts_acc_ct1(sycl::range<1>(64 /*THREADSPERBLOCK*/), cgh);
       sycl::accessor<int, 0, sycl::access::mode::read_write,
                      sycl::access::target::local>
           cnt_sh_acc_ct1(cgh);
       sycl::accessor<bool, 0, sycl::access::mode::read_write,
                      sycl::access::target::local>
           flag_sh_acc_ct1(cgh);
 
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, tpb),
                             sycl::range<3>(1, 1, tpb)),
           [=](sycl::nd_item<3> item_ct1) {
             trim_ungrouped_pnts_indr_array(
                 winner_index, (int *)ungrpd_pnts_indr, (float *)distance_matrix,
                 (int *)result, (char *)Ai_mask, (char *)clustered_pnts_mask,
                 (int *)indr_mtrx, (int *)cardnl, (float *)dist_to_clust,
                 (int *)degrees, point_count, max_point_count, max_degree,
                 threshold, item_ct1, dist_array_acc_ct1.get_pointer(),
                 point_index_array_acc_ct1.get_pointer(),
                 tmp_pnts_acc_ct1.get_pointer(), cnt_sh_acc_ct1.get_pointer(),
                 flag_sh_acc_ct1.get_pointer());
           });
     });
","       q_ct1.submit([&](sycl::handler &cgh) {
          sycl::accessor<float, 1, sycl::access::mode::read_write,
                         sycl::access::target::local>
          sycl::accessor<int, 1, sycl::access::mode::read_write,
                         sycl::access::target::local>
                                        cgh);
          sycl::accessor<int, 1, sycl::access::mode::read_write,
                         sycl::access::target::local>
          sycl::accessor<int, 0, sycl::access::mode::read_write,
                         sycl::access::target::local>
              cnt_sh_acc_ct1(cgh);
          sycl::accessor<bool, 0, sycl::access::mode::read_write,
                         sycl::access::target::local>
              flag_sh_acc_ct1(cgh);
 
          cgh.parallel_for(
              sycl::nd_range<3>(sycl::range<3>(1, 1, tpb),
                                sycl::range<3>(1, 1, tpb)),
              [=](sycl::nd_item<3> item_ct1) {
                 trim_ungrouped_pnts_indr_array(
                     winner_index, (int *)ungrpd_pnts_indr,
                     (float *)distance_matrix, (int *)result, (char *)Ai_mask,
                     (char *)clustered_pnts_mask, (int *)indr_mtrx,
                     (int *)cardnl, (float *)dist_to_clust, (int *)degrees,
                     point_count, max_point_count, max_degree, threshold,
                     item_ct1, dist_array_acc_ct1.get_pointer(),
                     point_index_array_acc_ct1.get_pointer(),
                     tmp_pnts_acc_ct1.get_pointer(),
                     cnt_sh_acc_ct1.get_pointer(),
                     flag_sh_acc_ct1.get_pointer());
              });
       });
"
216,../oneAPI-DirectProgramming-training/qtclustering/dpcpp/QTC.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, tpb),
                                          sycl::range<3>(1, 1, tpb)),
                        [=](sycl::nd_item<3> item_ct1) {
                          update_clustered_pnts_mask((char *)clustered_pnts_mask,
                                                     (char *)Ai_mask,
                                                     max_point_count, item_ct1);
                        });
     });
","       q_ct1.submit([&](sycl::handler &cgh) {
          cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, tpb),
                                             sycl::range<3>(1, 1, tpb)),
                           [=](sycl::nd_item<3> item_ct1) {
                              update_clustered_pnts_mask(
                                  (char *)clustered_pnts_mask, (char *)Ai_mask,
                                  max_point_count, item_ct1);
                           });
       });
"
217,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
218,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
219,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
220,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
221,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
222,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
223,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
224,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
225,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
226,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
227,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
228,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
229,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
230,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
231,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
232,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
233,../oneAPI-DirectProgramming-training/quicksort/dpcpp/main.dp.cpp,"   /*
","   /*
"
234,../oneAPI-DirectProgramming-training/randomAccess/dpcpp/main.dp.cpp,"     sycl::atomic<u64Int>(
","     sycl::atomic<u64Int>(
"
235,../oneAPI-DirectProgramming-training/recursiveGaussian/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
236,../oneAPI-DirectProgramming-training/recursiveGaussian/dpcpp/main.dp.cpp,"         /*
","         /*
"
237,../oneAPI-DirectProgramming-training/recursiveGaussian/dpcpp/main.dp.cpp,"   /*
","   /*
"
238,../oneAPI-DirectProgramming-training/recursiveGaussian/dpcpp/main.dp.cpp,"         /*
","         /*
"
239,../oneAPI-DirectProgramming-training/recursiveGaussian/dpcpp/main.dp.cpp,"   /*
","   /*
"
240,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," /*
"," /*
"
241,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," /*
"," /*
"
242,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," DPCT1001:0: The statement could not be removed.
"," /*
"
243,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"               << std::endl;
"," DPCT1001:0: The statement could not be removed.
"
244,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"     sycl::atomic<int>(sycl::global_ptr<int>(out)).fetch_add(sum);
","           /*
"
245,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," }
 
 void atomic_reduction_v2(int *in, int* out, int arrayLength,
                          sycl::nd_item<3> item_ct1) {
","           DPCT1009:3: SYCL uses exceptions to report errors and does not use the
"
246,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"     sycl::atomic<int>(sycl::global_ptr<int>(out)).fetch_add(sum);
","           error codes. The original code was commented out and a warning string
"
247,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," }
 
 void atomic_reduction_v4(int *in, int* out, int arrayLength,
                          sycl::nd_item<3> item_ct1) {
","           was inserted. You need to rewrite this code.
"
248,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"     sycl::atomic<int>(sycl::global_ptr<int>(out)).fetch_add(sum);
","           */
"
249,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," }
 void atomic_reduction_v8(int *in, int* out, int arrayLength,
                          sycl::nd_item<3> item_ct1) {
"," }
 
 void atomic_reduction_v2(int *in, int* out, int arrayLength,
                          sycl::nd_item<3> item_ct1) {
"
250,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"     sycl::atomic<int>(sycl::global_ptr<int>(out)).fetch_add(sum);
"," }
 
 void atomic_reduction_v4(int *in, int* out, int arrayLength,
                          sycl::nd_item<3> item_ct1) {
"
251,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," }
 
 void atomic_reduction_v16(int *in, int* out, int arrayLength,
                           sycl::nd_item<3> item_ct1) {
"," }
 void atomic_reduction_v8(int *in, int* out, int arrayLength,
                          sycl::nd_item<3> item_ct1) {
"
252,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"     sycl::atomic<int>(sycl::global_ptr<int>(out)).fetch_add(sum);
"," }
 
 void atomic_reduction_v16(int *in, int* out, int arrayLength,
                           sycl::nd_item<3> item_ct1) {
"
253,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp," }
 
 int main(int argc, char** argv)
 {
"," }
 
 int main(int argc, char** argv)
 {
"
254,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                       sycl::range<3>(1, 1, threads),
                                   sycl::range<3>(1, 1, threads)),
                 [=](sycl::nd_item<3> item_ct1) {
                     atomic_reduction(in, out, arrayLength, item_ct1);
                 });
         });
"," q_ct1.submit([&](sycl::handler &cgh) {
 cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                        sycl::range<3>(1, 1, threads),
                                    sycl::range<3>(1, 1, threads)),
                  [=](sycl::nd_item<3> item_ct1) {
                  atomic_reduction(in, out, arrayLength, item_ct1);
                  });
 });
"
255,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                       sycl::range<3>(1, 1, threads),
                                   sycl::range<3>(1, 1, threads)),
                 [=](sycl::nd_item<3> item_ct1) {
                     atomic_reduction_v2(in, out, arrayLength, item_ct1);
                 });
         });
"," q_ct1.submit([&](sycl::handler &cgh) {
 cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                        sycl::range<3>(1, 1, threads),
                                    sycl::range<3>(1, 1, threads)),
                  [=](sycl::nd_item<3> item_ct1) {
                  atomic_reduction_v2(in, out, arrayLength, item_ct1);
                  });
 });
"
256,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                       sycl::range<3>(1, 1, threads),
                                   sycl::range<3>(1, 1, threads)),
                 [=](sycl::nd_item<3> item_ct1) {
                     atomic_reduction_v4(in, out, arrayLength, item_ct1);
                 });
         });
"," q_ct1.submit([&](sycl::handler &cgh) {
 cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                        sycl::range<3>(1, 1, threads),
                                    sycl::range<3>(1, 1, threads)),
                  [=](sycl::nd_item<3> item_ct1) {
                  atomic_reduction_v4(in, out, arrayLength, item_ct1);
                  });
 });
"
257,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                       sycl::range<3>(1, 1, threads),
                                   sycl::range<3>(1, 1, threads)),
                 [=](sycl::nd_item<3> item_ct1) {
                     atomic_reduction_v8(in, out, arrayLength, item_ct1);
                 });
         });
"," q_ct1.submit([&](sycl::handler &cgh) {
 cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                        sycl::range<3>(1, 1, threads),
                                    sycl::range<3>(1, 1, threads)),
                  [=](sycl::nd_item<3> item_ct1) {
                  atomic_reduction_v8(in, out, arrayLength, item_ct1);
                  });
 });
"
258,../oneAPI-DirectProgramming-training/reduction/dpcpp/reduction.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                       sycl::range<3>(1, 1, threads),
                                   sycl::range<3>(1, 1, threads)),
                 [=](sycl::nd_item<3> item_ct1) {
                     atomic_reduction_v16(in, out, arrayLength, item_ct1);
                 });
         });
"," q_ct1.submit([&](sycl::handler &cgh) {
 cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(1, 1, blocks) *
                                        sycl::range<3>(1, 1, threads),
                                    sycl::range<3>(1, 1, threads)),
                  [=](sycl::nd_item<3> item_ct1) {
                  atomic_reduction_v16(in, out, arrayLength, item_ct1);
                  });
 });
"
259,../oneAPI-DirectProgramming-training/reverse/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
260,../oneAPI-DirectProgramming-training/rng-wallace/dpcpp/main.dp.cpp," 
     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<float, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           pool_acc_ct1(
               sycl::range<1>(
               cgh);
 
       cgh.parallel_for(sycl::nd_range<3>(rng_wallace_grid * rng_wallace_threads,
                                          rng_wallace_threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          rng_wallace(seed, devPool, device_randomNumbers,
                                      devicerngChi2Corrections, item_ct1,
                                      pool_acc_ct1.get_pointer());
                        });
     });
","   q_ct1.submit([&](sycl::handler &cgh) {
    sycl::accessor<float, 1, sycl::access::mode::read_write,
                   sycl::access::target::local>
        pool_acc_ct1(sycl::range<1>(
                     cgh);
 
    auto dpct_global_range = rng_wallace_grid * rng_wallace_threads;
 
    cgh.parallel_for(
        sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                         dpct_global_range.get(1),
                                         dpct_global_range.get(0)),
                          sycl::range<3>(rng_wallace_threads.get(2),
                                         rng_wallace_threads.get(1),
                                         rng_wallace_threads.get(0))),
        [=](sycl::nd_item<3> item_ct1) {
         rng_wallace(seed, devPool, device_randomNumbers,
                     devicerngChi2Corrections, item_ct1,
                     pool_acc_ct1.get_pointer());
        });
   });
"
261,../oneAPI-DirectProgramming-training/rtm8/dpcpp/rtm8.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(nz_pad, ny_pad, nx_pad) *
                                 sycl::range<3>(1, groupSize, groupSize),
                             sycl::range<3>(1, groupSize, groupSize)),
           [=](sycl::nd_item<3> item_ct1) {
             rtm8(vsq_d, current_s_d, next_s_d, current_r_d, next_r_d, image_d,
                  a_d, ArraySize, item_ct1);
           });
     });
","                 q_ct1.submit([&](sycl::handler &cgh) {
                         cgh.parallel_for(
                             sycl::nd_range<3>(
                                 sycl::range<3>(nz_pad, ny_pad, nx_pad) *
                                     sycl::range<3>(1, groupSize, groupSize),
                                 sycl::range<3>(1, groupSize, groupSize)),
                             [=](sycl::nd_item<3> item_ct1) {
                                     rtm8(vsq_d, current_s_d, next_s_d,
                                          current_r_d, next_r_d, image_d, a_d,
                                          ArraySize, item_ct1);
                             });
                 });
"
262,../oneAPI-DirectProgramming-training/scan/dpcpp/main.dp.cpp,"                 item_ct1.barrier();
","   item_ct1.barrier();
"
263,../oneAPI-DirectProgramming-training/scan/dpcpp/main.dp.cpp,"                 item_ct1.barrier();
","   item_ct1.barrier();
"
264,../oneAPI-DirectProgramming-training/simplemoc/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(grids * threads, threads),
                        [=](sycl::nd_item<3> item_ct1) {
                          att(d_QSR_id, d_FAI_id, d_fine_flux, d_fine_source,
                              d_sigT, d_state_flux, d_simd_vecs,
                              fine_axial_intervals, egroups, segments, item_ct1);
                        });
     });
","   q_ct1.submit([&](sycl::handler &cgh) {
    auto dpct_global_range = grids * threads;
 
    cgh.parallel_for(
        sycl::nd_range<3>(
            sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                           dpct_global_range.get(0)),
            sycl::range<3>(threads.get(2), threads.get(1), threads.get(0))),
        [=](sycl::nd_item<3> item_ct1) {
         att(d_QSR_id, d_FAI_id, d_fine_flux, d_fine_source, d_sigT,
             d_state_flux, d_simd_vecs, fine_axial_intervals, egroups, segments,
             item_ct1);
        });
   });
"
265,../oneAPI-DirectProgramming-training/snake/dpcpp/main.dp.cpp,"       q_ct1.submit([&](sycl::handler &cgh) {
         cgh.parallel_for(sycl::nd_range<3>(grid * block, block),
                          [=](sycl::nd_item<3> item_ct1) {
                            sneaky_snake(Dev_ReadSeq, Dev_RefSeq, Dev_Results,
                                         NumReads, F_ErrorThreshold, item_ct1);
                          });
       });
","    q_ct1.submit([&](sycl::handler &cgh) {
     auto dpct_global_range = grid * block;
 
     cgh.parallel_for(
         sycl::nd_range<3>(
             sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                            dpct_global_range.get(0)),
             sycl::range<3>(block.get(2), block.get(1), block.get(0))),
         [=](sycl::nd_item<3> item_ct1) {
          sneaky_snake(Dev_ReadSeq, Dev_RefSeq, Dev_Results, NumReads,
                       F_ErrorThreshold, item_ct1);
         });
    });
"
266,../oneAPI-DirectProgramming-training/softmax/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(sycl::nd_range<3>(global_work_size * local_work_size,
                                          local_work_size),
                        [=](sycl::nd_item<3> item_ct1) {
                          softMax(numSlice, sliceSize, d_input, d_output,
                                  item_ct1);
                        });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       auto dpct_global_range = global_work_size * local_work_size;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(local_work_size.get(2), local_work_size.get(1),
                              local_work_size.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             softMax(numSlice, sliceSize, d_input, d_output, item_ct1);
           });
     });
"
267,../oneAPI-DirectProgramming-training/sosfil/dpcpp/main.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
268,../oneAPI-DirectProgramming-training/sosfil/dpcpp/main.dp.cpp,"       item_ct1.barrier();
","       item_ct1.barrier();
"
269,../oneAPI-DirectProgramming-training/sosfil/dpcpp/main.dp.cpp,"       item_ct1.barrier();
","       item_ct1.barrier();
"
270,../oneAPI-DirectProgramming-training/sosfil/dpcpp/main.dp.cpp,"         item_ct1.barrier();
","         item_ct1.barrier();
"
271,../oneAPI-DirectProgramming-training/sosfil/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<uint8_t, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           dpct_local_acc_ct1(sycl::range<1>(shared_mem), cgh);
 
       cgh.parallel_for(
           sycl::nd_range<3>(blocksPerGrid * threadsPerBlock, threadsPerBlock),
           [=](sycl::nd_item<3> item_ct1) {
             sosfilt<T>(n_signals, n_samples, n_sections, zi_width, d_sos, d_zi,
                        d_x, item_ct1, dpct_local_acc_ct1.get_pointer());
           });
     });
","     q_ct1.submit([&](sycl::handler &cgh) {
       sycl::accessor<uint8_t, 1, sycl::access::mode::read_write,
                      sycl::access::target::local>
           dpct_local_acc_ct1(sycl::range<1>(shared_mem), cgh);
 
       auto dpct_global_range = blocksPerGrid * threadsPerBlock;
 
       cgh.parallel_for(
           sycl::nd_range<3>(
               sycl::range<3>(dpct_global_range.get(2), dpct_global_range.get(1),
                              dpct_global_range.get(0)),
               sycl::range<3>(threadsPerBlock.get(2), threadsPerBlock.get(1),
                              threadsPerBlock.get(0))),
           [=](sycl::nd_item<3> item_ct1) {
             sosfilt<T>(n_signals, n_samples, n_sections, zi_width, d_sos, d_zi,
                        d_x, item_ct1, dpct_local_acc_ct1.get_pointer());
           });
     });
"
272,../oneAPI-DirectProgramming-training/sph/dpcpp/fluid.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(grid1D_FP) *
                                                    sycl::range<3>(block1D),
                                                sycl::range<3>(block1D)),
                              [=](sycl::nd_item<3> item_ct1) {
                                  updatePressures(d_fluid_particles, d_params,
                                                  item_ct1);
                              });
         });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range =
                 sycl::range<3>(grid1D_FP) * sycl::range<3>(block1D);
             auto dpct_local_range = sycl::range<3>(block1D);
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(dpct_local_range.get(2),
                                                  dpct_local_range.get(1),
                                                  dpct_local_range.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     updatePressures(d_fluid_particles, d_params, item_ct1);
                 });
         });
"
273,../oneAPI-DirectProgramming-training/sph/dpcpp/fluid.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(grid1D_FP) *
                                                    sycl::range<3>(block1D),
                                                sycl::range<3>(block1D)),
                              [=](sycl::nd_item<3> item_ct1) {
                                  updateAccelerationsFP(d_fluid_particles,
                                                        d_params, item_ct1);
                              });
         });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range =
                 sycl::range<3>(grid1D_FP) * sycl::range<3>(block1D);
             auto dpct_local_range = sycl::range<3>(block1D);
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(dpct_local_range.get(2),
                                                  dpct_local_range.get(1),
                                                  dpct_local_range.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     updateAccelerationsFP(d_fluid_particles, d_params,
                                           item_ct1);
                 });
         });
"
274,../oneAPI-DirectProgramming-training/sph/dpcpp/fluid.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(grid1D_BP) *
                                                    sycl::range<3>(block1D),
                                                sycl::range<3>(block1D)),
                              [=](sycl::nd_item<3> item_ct1) {
                                  updateAccelerationsBP(d_fluid_particles,
                                                        d_boundary_particles,
                                                        d_params, item_ct1);
                              });
         });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range =
                 sycl::range<3>(grid1D_BP) * sycl::range<3>(block1D);
             auto dpct_local_range = sycl::range<3>(block1D);
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(dpct_local_range.get(2),
                                                  dpct_local_range.get(1),
                                                  dpct_local_range.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     updateAccelerationsBP(d_fluid_particles,
                                           d_boundary_particles, d_params,
                                           item_ct1);
                 });
         });
"
275,../oneAPI-DirectProgramming-training/sph/dpcpp/fluid.dp.cpp,"         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(sycl::nd_range<3>(sycl::range<3>(grid1D_FP) *
                                                    sycl::range<3>(block1D),
                                                sycl::range<3>(block1D)),
                              [=](sycl::nd_item<3> item_ct1) {
                                  updatePositions(d_fluid_particles, d_params,
                                                  item_ct1);
                              });
         });
","         q_ct1.submit([&](sycl::handler &cgh) {
             auto dpct_global_range =
                 sycl::range<3>(grid1D_FP) * sycl::range<3>(block1D);
             auto dpct_local_range = sycl::range<3>(block1D);
 
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(dpct_global_range.get(2),
                                                  dpct_global_range.get(1),
                                                  dpct_global_range.get(0)),
                                   sycl::range<3>(dpct_local_range.get(2),
                                                  dpct_local_range.get(1),
                                                  dpct_local_range.get(0))),
                 [=](sycl::nd_item<3> item_ct1) {
                     updatePositions(d_fluid_particles, d_params, item_ct1);
                 });
         });
"
276,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"     int iter_local =
","     int iter_local =
"
277,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"     int n_t_local = sycl::atomic<int>(sycl::global_ptr<int>(n_t)).fetch_add(0);
","     int n_t_local = sycl::atomic<int>(sycl::global_ptr<int>(n_t)).fetch_add(0);
"
278,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"     int gray_shade_local =
","     int gray_shade_local =
"
279,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"         *base = sycl::atomic<int>(sycl::global_ptr<int>(&head[0]))
","         *base = sycl::atomic<int>(sycl::global_ptr<int>(&head[0]))
"
280,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
281,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"                 *shift = sycl::atomic<int>(sycl::global_ptr<int>(&tail[0]))
","                 *shift = sycl::atomic<int>(sycl::global_ptr<int>(&tail[0]))
"
282,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"             item_ct1.barrier();
","             item_ct1.barrier();
"
283,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"             item_ct1.barrier();
","             item_ct1.barrier();
"
284,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"             item_ct1.barrier();
","             item_ct1.barrier();
"
285,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"             dpct::atomic_exchange(&color[pid], BLACK); // Node visited
","             dpct::atomic_exchange(&color[pid], BLACK); // Node visited
"
286,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"             int cur_cost =
","             int cur_cost =
"
287,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"                 int orig_cost =
","                 int orig_cost =
"
288,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"                     int old_color =
","                     int old_color =
"
289,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"             *base =
","             *base =
"
290,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"         item_ct1.barrier();
","         item_ct1.barrier();
"
291,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"         *shift = sycl::atomic<int>(sycl::global_ptr<int>(&tail[0]))
","         *shift = sycl::atomic<int>(sycl::global_ptr<int>(&tail[0]))
"
292,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
293,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"         sycl::atomic<int>(sycl::global_ptr<int>(&iter[0])).fetch_add(1);
","         sycl::atomic<int>(sycl::global_ptr<int>(&iter[0])).fetch_add(1);
"
294,../oneAPI-DirectProgramming-training/sssp/dpcpp/main.dp.cpp,"           q_ct1.submit([&](sycl::handler &cgh) {
             sycl::accessor<int, 1, sycl::access::mode::read_write,
                            sycl::access::target::local>
             sycl::accessor<int, 0, sycl::access::mode::read_write,
                            sycl::access::target::local>
                 tail_bin_acc_ct1(cgh);
 
             cgh.parallel_for(sycl::nd_range<3>(dimGrid * dimBlock, dimBlock),
                              [=](sycl::nd_item<3> item_ct1) {
                                SSSP_gpu(d_nodes, d_edges, d_cost, d_color,
                                         d_qin, d_qout, d_num_t, d_head, d_tail,
                                         d_threads_end, d_threads_run,
                                         d_overflow, d_gray_shade, d_iter,
                                         p.switching_limit, CPU_EXEC, item_ct1,
                                         l_mem_acc_ct1.get_pointer(),
                                         tail_bin_acc_ct1.get_pointer());
                              });
           });
","                     q_ct1.submit([&](sycl::handler &cgh) {
                         sycl::accessor<int, 1, sycl::access::mode::read_write,
                                        sycl::access::target::local>
                             l_mem_acc_ct1(
                         sycl::accessor<int, 0, sycl::access::mode::read_write,
                                        sycl::access::target::local>
                             tail_bin_acc_ct1(cgh);
 
                         auto dpct_global_range = dimGrid * dimBlock;
 
                         cgh.parallel_for(
                             sycl::nd_range<3>(
                                 sycl::range<3>(dpct_global_range.get(2),
                                                dpct_global_range.get(1),
                                                dpct_global_range.get(0)),
                                 sycl::range<3>(dimBlock.get(2), dimBlock.get(1),
                                                dimBlock.get(0))),
                             [=](sycl::nd_item<3> item_ct1) {
                                 SSSP_gpu(d_nodes, d_edges, d_cost, d_color,
                                          d_qin, d_qout, d_num_t, d_head, d_tail,
                                          d_threads_end, d_threads_run,
                                          d_overflow, d_gray_shade, d_iter,
                                          p.switching_limit, CPU_EXEC, item_ct1,
                                          l_mem_acc_ct1.get_pointer(),
                                          tail_bin_acc_ct1.get_pointer());
                             });
                     });
"
295,../oneAPI-DirectProgramming-training/stencil/dpcpp/stencil_1d.dp.cpp,"   item_ct1.barrier();
","   item_ct1.barrier();
"
296,../oneAPI-DirectProgramming-training/testSNAP/dpcpp/main.dp.cpp,"     /*
","     /*
"
297,../oneAPI-DirectProgramming-training/testSNAP/dpcpp/main.dp.cpp,"     /*
","     /*
"
298,../oneAPI-DirectProgramming-training/testSNAP/dpcpp/main.dp.cpp,"     /*
","     /*
"
299,../oneAPI-DirectProgramming-training/testSNAP/dpcpp/main.dp.cpp,"     /*
","     /*
"
300,../oneAPI-DirectProgramming-training/testSNAP/dpcpp/main.dp.cpp,"     /*
","     /*
"
301,../oneAPI-DirectProgramming-training/testSNAP/dpcpp/main.dp.cpp,"     /*
","     /*
"
302,../oneAPI-DirectProgramming-training/testSNAP/dpcpp/main.dp.cpp,"     /*
","     /*
"
303,../oneAPI-DirectProgramming-training/thomas/dpcpp/main.dp.cpp,"     q_ct1.submit([&](sycl::handler &cgh) {
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, (N / BlockSize) + 1) *
                                 sycl::range<3>(1, 1, BlockSize),
                             sycl::range<3>(1, 1, BlockSize)),
           [=](sycl::nd_item<3> item_ct1) {
             cuThomasBatch(l_device, d_device, u_device, rhs_device, M, N);
           });
     });
","         q_ct1.submit([&](sycl::handler &cgh) {
             cgh.parallel_for(
                 sycl::nd_range<3>(sycl::range<3>(1, 1, (N / BlockSize) + 1) *
                                       sycl::range<3>(1, 1, BlockSize),
                                   sycl::range<3>(1, 1, BlockSize)),
                 [=](sycl::nd_item<3> item_ct1) {
                     cuThomasBatch(l_device, d_device, u_device, rhs_device, M,
                                   N, item_ct1);
                 });
         });
"
304,../oneAPI-DirectProgramming-training/transpose/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
305,../oneAPI-DirectProgramming-training/transpose/dpcpp/main.dp.cpp,"     item_ct1.barrier();
","     item_ct1.barrier();
"
